// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smitenight.Persistence.Data.EntityFramework;

#nullable disable

namespace Smitenight.Persistence.Data.EntityFramework.Migrations
{
    [DbContext(typeof(SmitenightDbContext))]
    [Migration("20230603101530_Descriptions can be null")]
    partial class Descriptionscanbenull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityType")
                        .HasColumnType("int");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cooldown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodId")
                        .HasColumnType("int");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GodId");

                    b.HasIndex("PatchId");

                    b.ToTable("Abilities", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.AbilityRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityRanks", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.AbilityTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityTags", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Active", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChildActiveId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("ItemIconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemTier")
                        .HasColumnType("int");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("RootActiveId")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildActiveId");

                    b.HasIndex("PatchId");

                    b.HasIndex("RootActiveId");

                    b.ToTable("Actives", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.ActivePurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveId")
                        .HasColumnType("int");

                    b.Property<int>("ActivePurchaseOrder")
                        .HasColumnType("int");

                    b.Property<int>("MatchDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveId");

                    b.HasIndex("MatchDetailId");

                    b.ToTable("ActivePurchases", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("ItemIconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatchId");

                    b.ToTable("Consumables", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.God", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AttackSpeed")
                        .HasColumnType("real");

                    b.Property<float>("AttackSpeedPerLevel")
                        .HasColumnType("real");

                    b.Property<bool>("AutoBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GodCardUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GodIconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("HealthPerFive")
                        .HasColumnType("int");

                    b.Property<int>("HealthPerLevel")
                        .HasColumnType("int");

                    b.Property<float>("Hp5PerLevel")
                        .HasColumnType("real");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<bool>("LatestGod")
                        .HasColumnType("bit");

                    b.Property<string>("Lore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MagicProtection")
                        .HasColumnType("real");

                    b.Property<float>("MagicProtectionPerLevel")
                        .HasColumnType("real");

                    b.Property<int>("MagicalPower")
                        .HasColumnType("int");

                    b.Property<float>("MagicalPowerPerLevel")
                        .HasColumnType("real");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<float>("ManaPerFive")
                        .HasColumnType("real");

                    b.Property<int>("ManaPerLevel")
                        .HasColumnType("int");

                    b.Property<float>("Mp5PerLevel")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnFreeRotation")
                        .HasColumnType("bit");

                    b.Property<string>("Pantheon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalPower")
                        .HasColumnType("int");

                    b.Property<float>("PhysicalPowerPerLevel")
                        .HasColumnType("real");

                    b.Property<float>("PhysicalProtection")
                        .HasColumnType("real");

                    b.Property<float>("PhysicalProtectionPerLevel")
                        .HasColumnType("real");

                    b.Property<string>("Pros")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatchId");

                    b.ToTable("Gods", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GodBanOrder")
                        .HasColumnType("int");

                    b.Property<int>("GodId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GodId");

                    b.HasIndex("MatchId");

                    b.ToTable("GodBans", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodBasicAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GodId");

                    b.ToTable("GodBasicAttacks", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodSkin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodId")
                        .HasColumnType("int");

                    b.Property<string>("GodSkinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Obtainability")
                        .HasColumnType("int");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("PriceFavor")
                        .HasColumnType("int");

                    b.Property<int>("PriceGems")
                        .HasColumnType("int");

                    b.Property<int>("SecondarySmiteId")
                        .HasColumnType("int");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GodId");

                    b.HasIndex("PatchId");

                    b.ToTable("GodSkins", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChildItemId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Glyph")
                        .HasColumnType("bit");

                    b.Property<string>("ItemIconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemTier")
                        .HasColumnType("int");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RestrictedRoles")
                        .HasColumnType("int");

                    b.Property<int?>("RootItemId")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.Property<bool>("StartingItem")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChildItemId");

                    b.HasIndex("PatchId");

                    b.HasIndex("RootItemId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.ItemDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemDescriptions", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.ItemPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MatchDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MatchDetailId");

                    b.ToTable("ItemPurchases", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GameMap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameModeQueue")
                        .HasColumnType("int");

                    b.Property<int>("MatchDuration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamOneScore")
                        .HasColumnType("int");

                    b.Property<int?>("TeamTwoScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.MatchDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("BotKills")
                        .HasColumnType("int");

                    b.Property<int>("DamageDone")
                        .HasColumnType("int");

                    b.Property<int>("DamageDoneInHand")
                        .HasColumnType("int");

                    b.Property<int>("DamageDoneMagical")
                        .HasColumnType("int");

                    b.Property<int>("DamageDonePhysical")
                        .HasColumnType("int");

                    b.Property<int>("DamageDoneToBots")
                        .HasColumnType("int");

                    b.Property<int>("DamageDoneToStructures")
                        .HasColumnType("int");

                    b.Property<int>("DamageMitigated")
                        .HasColumnType("int");

                    b.Property<int>("DamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("DamageTakenMagical")
                        .HasColumnType("int");

                    b.Property<int>("DamageTakenPhysical")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("DistanceTraveled")
                        .HasColumnType("int");

                    b.Property<int>("DoubleKills")
                        .HasColumnType("int");

                    b.Property<int>("FireGiantKills")
                        .HasColumnType("int");

                    b.Property<int>("FirstBlood")
                        .HasColumnType("int");

                    b.Property<int>("GodId")
                        .HasColumnType("int");

                    b.Property<int>("GodRole")
                        .HasColumnType("int");

                    b.Property<int>("GodSkinId")
                        .HasColumnType("int");

                    b.Property<int>("GoldEarned")
                        .HasColumnType("int");

                    b.Property<int>("GoldEarnedPerMinute")
                        .HasColumnType("int");

                    b.Property<int>("GoldFuryKills")
                        .HasColumnType("int");

                    b.Property<int>("HealingDone")
                        .HasColumnType("int");

                    b.Property<int>("HealingDoneToBots")
                        .HasColumnType("int");

                    b.Property<int>("HealingDoneToSelf")
                        .HasColumnType("int");

                    b.Property<int>("HighestMultiKill")
                        .HasColumnType("int");

                    b.Property<int>("KillingSpree")
                        .HasColumnType("int");

                    b.Property<int>("LevelReached")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MatchTeam")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveAssists")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("PentaKills")
                        .HasColumnType("int");

                    b.Property<int>("PhoenixKills")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerKills")
                        .HasColumnType("int");

                    b.Property<int>("QuadraKills")
                        .HasColumnType("int");

                    b.Property<int>("SiegeJuggernautKills")
                        .HasColumnType("int");

                    b.Property<int>("SingleKills")
                        .HasColumnType("int");

                    b.Property<bool>("Surrendered")
                        .HasColumnType("bit");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TotalTimeDead")
                        .HasColumnType("int");

                    b.Property<int>("TowerKills")
                        .HasColumnType("int");

                    b.Property<int>("TripleKills")
                        .HasColumnType("int");

                    b.Property<int>("WardsPlaced")
                        .HasColumnType("int");

                    b.Property<int>("WildJuggernautKills")
                        .HasColumnType("int");

                    b.Property<bool>("Winner")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GodId");

                    b.HasIndex("GodSkinId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchDetails", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patches", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HirezGamerTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HirezPlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastSynchronizedMatchId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MasteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PortalType")
                        .HasColumnType("int");

                    b.Property<bool>("PrivacyEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("SmiteId")
                        .HasColumnType("int");

                    b.Property<long?>("SmitePortalUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.PlayerNameAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstTimeUsed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeUsed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextAttemptPossibleAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayerNameAttempts", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Smitenight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Smitenights", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.SmitenightMatch", b =>
                {
                    b.Property<int>("SmitenightId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("SmitenightId");

                    b.HasIndex("MatchId");

                    b.ToTable("SmitenightMatches", (string)null);
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Ability", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.God", "God")
                        .WithMany("Abilities")
                        .HasForeignKey("GodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", "Patch")
                        .WithMany("Abilities")
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("God");

                    b.Navigation("Patch");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.AbilityRank", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Ability", "Ability")
                        .WithMany("AbilityRanks")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.AbilityTag", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Ability", "Ability")
                        .WithMany("AbilityTags")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Active", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Active", "ChildActive")
                        .WithMany()
                        .HasForeignKey("ChildActiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", "Patch")
                        .WithMany("Actives")
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Active", "RootActive")
                        .WithMany()
                        .HasForeignKey("RootActiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChildActive");

                    b.Navigation("Patch");

                    b.Navigation("RootActive");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.ActivePurchase", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Active", "Active")
                        .WithMany("ActivePurchases")
                        .HasForeignKey("ActiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.MatchDetail", "MatchDetail")
                        .WithMany("ActivePurchases")
                        .HasForeignKey("MatchDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Active");

                    b.Navigation("MatchDetail");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Consumable", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", "Patch")
                        .WithMany("Consumables")
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patch");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.God", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", "Patch")
                        .WithMany("Gods")
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patch");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodBan", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.God", "God")
                        .WithMany("GodBans")
                        .HasForeignKey("GodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Match", "Match")
                        .WithMany("GodBans")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("God");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodBasicAttack", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.God", "God")
                        .WithMany("GodBasicAttacks")
                        .HasForeignKey("GodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("God");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodSkin", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.God", "God")
                        .WithMany("GodSkins")
                        .HasForeignKey("GodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", "Patch")
                        .WithMany("GodSkins")
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("God");

                    b.Navigation("Patch");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Item", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Item", "ChildItem")
                        .WithMany()
                        .HasForeignKey("ChildItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", "Patch")
                        .WithMany("Items")
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Item", "RootItem")
                        .WithMany()
                        .HasForeignKey("RootItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChildItem");

                    b.Navigation("Patch");

                    b.Navigation("RootItem");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.ItemDescription", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Item", "Item")
                        .WithMany("ItemDescriptions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.ItemPurchase", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Item", "Item")
                        .WithMany("ItemPurchases")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.MatchDetail", "MatchDetail")
                        .WithMany("ItemPurchases")
                        .HasForeignKey("MatchDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("MatchDetail");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.MatchDetail", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.God", "God")
                        .WithMany("MatchDetails")
                        .HasForeignKey("GodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.GodSkin", "GodSkin")
                        .WithMany("MatchDetails")
                        .HasForeignKey("GodSkinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Match", "Match")
                        .WithMany("MatchDetails")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Player", "Player")
                        .WithMany("MatchDetails")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("God");

                    b.Navigation("GodSkin");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Smitenight", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Player", "Player")
                        .WithMany("Smitenights")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.SmitenightMatch", b =>
                {
                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Match", "Match")
                        .WithMany("SmitenightMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smitenight.Persistence.Data.EntityFramework.Entities.Smitenight", "Smitenight")
                        .WithMany("SmitenightMatches")
                        .HasForeignKey("SmitenightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Smitenight");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Ability", b =>
                {
                    b.Navigation("AbilityRanks");

                    b.Navigation("AbilityTags");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Active", b =>
                {
                    b.Navigation("ActivePurchases");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.God", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("GodBans");

                    b.Navigation("GodBasicAttacks");

                    b.Navigation("GodSkins");

                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.GodSkin", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Item", b =>
                {
                    b.Navigation("ItemDescriptions");

                    b.Navigation("ItemPurchases");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Match", b =>
                {
                    b.Navigation("GodBans");

                    b.Navigation("MatchDetails");

                    b.Navigation("SmitenightMatches");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.MatchDetail", b =>
                {
                    b.Navigation("ActivePurchases");

                    b.Navigation("ItemPurchases");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Patch", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Actives");

                    b.Navigation("Consumables");

                    b.Navigation("GodSkins");

                    b.Navigation("Gods");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Player", b =>
                {
                    b.Navigation("MatchDetails");

                    b.Navigation("Smitenights");
                });

            modelBuilder.Entity("Smitenight.Persistence.Data.EntityFramework.Entities.Smitenight", b =>
                {
                    b.Navigation("SmitenightMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
